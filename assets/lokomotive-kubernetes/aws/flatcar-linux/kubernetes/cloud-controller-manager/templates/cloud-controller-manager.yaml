---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cloud-controller-manager
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: system:cloud-controller-manager
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: cloud-controller-manager
  namespace: kube-system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cloud-controller-manager
  namespace: kube-system
  labels:
    tier: control-plane
    k8s-app: cloud-controller-manager
spec:
  replicas: 2
  selector:
    matchLabels:
      tier: control-plane
      k8s-app: cloud-controller-manager
  template:
    metadata:
      labels:
        tier: control-plane
        k8s-app: cloud-controller-manager
      annotations:
        seccomp.security.alpha.kubernetes.io/pod: 'docker/default'
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: tier
                  operator: In
                  values:
                  - control-plane
                - key: k8s-app
                  operator: In
                  values:
                  - kube-scheduler
              topologyKey: kubernetes.io/hostname
      nodeSelector:
        node.kubernetes.io/master: ""
      priorityClassName: system-cluster-critical
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
      serviceAccountName: cloud-controller-manager
      tolerations:
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
      containers:
      - name: cloud-controller-manager
        image: k8s.gcr.io/cloud-controller-manager:v1.15.11
        command:
        - /usr/local/bin/cloud-controller-manager
        - --cloud-provider=aws
        - --use-service-account-credentials
        # Prevents breakdown of CCM spamming AWS
        # for cloud routes
        - --configure-cloud-routes=false
        - --allocate-node-cidrs=false
        - --allow-untagged-cloud
        volumeMounts:
        - mountPath: /etc/ssl/certs
          name: ca-certs
          readOnly: true
        - mountPath: /usr/share/ca-certificates/
          name: ca-real-certs
          readOnly: true
      volumes:
      - hostPath:
          path: /usr/share/ca-certificates/
          type: DirectoryOrCreate
        name: ca-real-certs
      - hostPath:
          path: /usr/share/ca-certificates/
          type: DirectoryOrCreate
        name: ca-certs
